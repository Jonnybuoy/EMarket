{
    version: 3,
    file: "bs-custom-file-input.min.js",
    sources: [
    "../src/selector.js",
    "../src/util.js",
    "../src/eventHandlers.js",
    "../src/index.js"
    ],
    sourcesContent: [
    "const Selector = {
      CUSTOMFILE: '.custom-file input[type="file"]',
      CUSTOMFILELABEL: '.custom-file-label',
      FORM: 'form',
      INPUT: 'input',
    }
    
    export default Selector
    ",
    "import Selector from './selector'
    
    const textNodeType = 3
    const getDefaultText = (input) => {
      let defaultText = ''
    
      const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)
    
      if (label) {
        defaultText = label.textContent
      }
    
      return defaultText
    }
    
    const findFirstChildNode = (element) => {
      if (element.childNodes.length > 0) {
        const childNodes = [].slice.call(element.childNodes)
    
        for (let i = 0; i < childNodes.length; i++) {
          const node = childNodes[i]
          if (node.nodeType !== textNodeType) {
            return node
          }
        }
      }
    
      return element
    }
    
    const restoreDefaultText = (input) => {
      const defaultText = input.bsCustomFileInput.defaultText
      const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)
    
      if (label) {
        const element = findFirstChildNode(label)
    
        element.textContent = defaultText
      }
    }
    
    export {
      getDefaultText,
      findFirstChildNode,
      restoreDefaultText,
    }
    ",
    "import { findFirstChildNode, restoreDefaultText } from './util'
    import Selector from './selector'
    
    const fileApi = !!window.File
    const FAKE_PATH = 'fakepath'
    const FAKE_PATH_SEPARATOR = '\\'
    
    const getSelectedFiles = (input) => {
      if (input.hasAttribute('multiple') && fileApi) {
        return [].slice.call(input.files)
          .map((file) => file.name)
          .join(', ')
      }
    
      if (input.value.indexOf(FAKE_PATH) !== -1) {
        const splittedValue = input.value.split(FAKE_PATH_SEPARATOR)
    
        return splittedValue[splittedValue.length - 1]
      }
    
      return input.value
    }
    
    function handleInputChange() {
      const label = this.parentNode.querySelector(Selector.CUSTOMFILELABEL)
    
      if (label) {
        const element = findFirstChildNode(label)
        const inputValue = getSelectedFiles(this)
    
        if (inputValue.length) {
          element.textContent = inputValue
        } else {
          restoreDefaultText(this)
        }
      }
    }
    
    function handleFormReset() {
      const customFileList = [].slice.call(this.querySelectorAll(Selector.INPUT))
        .filter((input) => !!input.bsCustomFileInput)
    
      for (let i = 0, len = customFileList.length; i < len; i++) {
        restoreDefaultText(customFileList[i])
      }
    }
    
    export {
      handleInputChange,
      handleFormReset,
    }
    ",
    "import { getDefaultText, restoreDefaultText } from './util'
    import { handleFormReset, handleInputChange } from './eventHandlers'
    import Selector from './selector'
    
    const customProperty = 'bsCustomFileInput'
    const Event = {
      FORMRESET   : 'reset',
      INPUTCHANGE : 'change',
    }
    
    const bsCustomFileInput = {
      init(inputSelector = Selector.CUSTOMFILE, formSelector = Selector.FORM) {
        const customFileInputList = [].slice.call(document.querySelectorAll(inputSelector))
        const formList = [].slice.call(document.querySelectorAll(formSelector))
    
        for (let i = 0, len = customFileInputList.length; i < len; i++) {
          const input = customFileInputList[i]
    
          Object.defineProperty(input, customProperty, {
            value: {
              defaultText: getDefaultText(input),
            },
            writable: true,
          })
    
          handleInputChange.call(input)
          input.addEventListener(Event.INPUTCHANGE, handleInputChange)
        }
    
        for (let i = 0, len = formList.length; i < len; i++) {
          formList[i].addEventListener(Event.FORMRESET, handleFormReset)
          Object.defineProperty(formList[i], customProperty, {
            value: true,
            writable: true,
          })
        }
      },
    
      destroy() {
        const formList = [].slice.call(document.querySelectorAll(Selector.FORM))
          .filter((form) => !!form.bsCustomFileInput)
        const customFileInputList = [].slice.call(document.querySelectorAll(Selector.INPUT))
          .filter((input) => !!input.bsCustomFileInput)
    
        for (let i = 0, len = customFileInputList.length; i < len; i++) {
          const input = customFileInputList[i]
    
          restoreDefaultText(input)
          input[customProperty] = undefined
    
          input.removeEventListener(Event.INPUTCHANGE, handleInputChange)
        }
    
        for (let i = 0, len = formList.length; i < len; i++) {
          formList[i].removeEventListener(Event.FORMRESET, handleFormReset)
          formList[i][customProperty] = undefined
        }
      },
    }
    
    export default bsCustomFileInput
    "
    ],
    names: [
    "Selector",
    "CUSTOMFILE",
    "CUSTOMFILELABEL",
    "FORM",
    "INPUT",
    "findFirstChildNode",
    "element",
    "childNodes",
    "length",
    "slice",
    "call",
    "i",
    "node",
    "nodeType",
    "restoreDefaultText",
    "input",
    "defaultText",
    "bsCustomFileInput",
    "label",
    "parentNode",
    "querySelector",
    "textContent",
    "fileApi",
    "window",
    "File",
    "getSelectedFiles",
    "hasAttribute",
    "files",
    "map",
    "file",
    "name",
    "join",
    "value",
    "indexOf",
    "splittedValue",
    "split",
    "handleInputChange",
    "this",
    "inputValue",
    "handleFormReset",
    "customFileList",
    "querySelectorAll",
    "filter",
    "len",
    "customProperty",
    "Event",
    "init",
    "inputSelector",
    "formSelector",
    "customFileInputList",
    "document",
    "formList",
    "Object",
    "defineProperty",
    "writable",
    "addEventListener",
    "destroy",
    "form",
    "undefined",
    "removeEventListener"
    ],
    mappings: "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"
    }